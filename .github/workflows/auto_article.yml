name: Auto Article Generator

# This workflow generates a Medium article using the Perplexity API and optionally
# publishes it via the Medium API. It runs on a fixed daily schedule and
# provides a manual trigger with inputs for full customisation. Secrets for
# PERPLEXITY_API_KEY and MEDIUM_TOKEN should be configured in the repository
# settings. Default values can be supplied via repository variables or by
# editing the defaults below.

on:
  schedule:
    # Daily at 06:00 UTC (adjust as needed).
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      topic:
        description: 'Topic of the article'
        required: false
        default: 'Serverless computing in India: pros and cons'
      publish:
        description: 'Publish to Medium (true|false)'
        required: false
        default: 'false'
      tags:
        description: 'Comma‑separated tags (max 5)'
        required: false
        default: ''
      audience:
        description: 'Audience level (beginner|intermediate|advanced)'
        required: false
        default: 'beginner'
      tone:
        description: 'Tone (friendly|professional|practical|conversational)'
        required: false
        default: 'practical'
      model:
        description: 'Perplexity model (sonar|sonar-reasoning|sonar-pro|sonar-deep-research)'
        required: false
        default: 'sonar'
      minutes:
        description: 'Estimated reading time'
        required: false
        default: '10'
      outline_depth:
        description: 'Outline depth (integer)'
        required: false
        default: '3'
      include_code:
        description: 'Include code snippets? (true|false)'
        required: false
        default: 'true'
      status:
        description: 'Medium publish status (draft|public|unlisted)'
        required: false
        default: 'draft'
      canonical_url:
        description: 'Canonical URL (optional)'
        required: false
        default: ''

concurrency:
  group: auto-article
  cancel-in-progress: false

jobs:
  generate:
    runs-on: ubuntu-latest
    env:
      # Secrets configured in repository settings for API keys
      PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
      MEDIUM_TOKEN: ${{ secrets.MEDIUM_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Generate (and optionally publish) article
        shell: bash
        run: |
          # Determine input values, falling back to defaults where necessary.
          TOPIC="${{ github.event.inputs.topic || 'Serverless computing in India: pros and cons' }}"
          AUDIENCE="${{ github.event.inputs.audience || 'beginner' }}"
          TONE="${{ github.event.inputs.tone || 'practical' }}"
          MODEL="${{ github.event.inputs.model || 'sonar' }}"
          MINUTES="${{ github.event.inputs.minutes || '10' }}"
          OUTLINE_DEPTH="${{ github.event.inputs.outline_depth || '3' }}"
          INCLUDE_CODE="${{ github.event.inputs.include_code || 'true' }}"
          TAGS="${{ github.event.inputs.tags || '' }}"
          PUBLISH="${{ github.event.inputs.publish || 'false' }}"
          STATUS="${{ github.event.inputs.status || 'draft' }}"
          CANONICAL_URL="${{ github.event.inputs.canonical_url || '' }}"

          # Build optional flags for the CLI.
          CODE_FLAG=""
          if [ "$INCLUDE_CODE" = "false" ]; then
            CODE_FLAG="--no-code"
          fi
          PUBLISH_FLAG=""
          if [ "$PUBLISH" = "true" ]; then
            PUBLISH_FLAG="--publish --status $STATUS"
          fi
          TAGS_ARG=""
          if [ -n "$TAGS" ]; then
            # Convert comma‑separated list into space‑separated arguments
            TAGS_ARG="--tags $(echo $TAGS | tr ',' ' ')"
          fi

          # Run the Python CLI to generate the article (and publish if requested).
          python -m app.cli \
            --topic "$TOPIC" \
            --audience "$AUDIENCE" \
            --tone "$TONE" \
            --model "$MODEL" \
            --minutes "$MINUTES" \
            --outline-depth "$OUTLINE_DEPTH" \
            $CODE_FLAG \
            $PUBLISH_FLAG \
            --canonical-url "$CANONICAL_URL" \
            $TAGS_ARG
